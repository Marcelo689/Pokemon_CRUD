@using ApiModelsResponse.ViewModels
@model List<PokemonViewModel>

@{
    ViewData["Title"] = "Lista de Pokémon";
    var currentPage = ViewBag.CurrentPage ?? 1;
    var pageSize = ViewBag.PageSize ?? 20;
    var totalCount = ViewBag.TotalCount ?? 1000;
    var totalPages = ViewBag.TotalPages ?? 1;
    var maxPagesToShow = 3;
    var searchQuery = ViewBag.SearchQuery as string ?? "";
}



<form style="margin-bottom: 4vmin !important; display:flex; justify-content:end;" method="get" action="@Url.Action("Index")" class="mb-3">
    <div class="search" style="display:flex; width :30%;  ">
        <input style="border-radius:20px 0px 0px 10px; width:40vw" type="text" class="form-control" name="search" placeholder="Buscar Pokémon..." value="@searchQuery">
        <input type="hidden" name="page" value="1"> <!-- Reseta para a primeira página -->
        <input type="hidden" name="pageSize" value="@pageSize">
        <button style="padding: 0.7rem 2rem; border-radius: 0px 10px 20px 0px; border: 2px solid #4335A7;border-left: 0px; font-weight: 700; " type="submit">Buscar</button>
    </div>
</form>

<div class="row">
    @foreach (var pokemon in Model)
    {
        <div class="col-md-3">
            <div class="card hover-sound mb-3" style="border: 2px solid rgb(227, 227, 227); width: fit-content; border-radius: 20px;">
                <a href="@Url.Action("Details", "PokemonApi", new { pokemonName = pokemon.Name })">
                    <img style="height: 200px; width: auto; border-radius: 20px 20px 0 0; border-bottom: 2px solid rgb(227, 227, 227);" src="@pokemon.Url" class="card-img-top" alt="@pokemon.Name">
                </a>
                <h5 style="font-weight: 700; text-align: center; color: #FF7F3E; margin: 1rem 0 1rem 0; font-size: 1.2rem;" class="card-title">@pokemon.Name.ToUpper()</h5>
            </div>
        </div>
    }
</div>

@if (totalPages > 1)
{
    <nav aria-label="Navegação de página">
        <ul class="pagination justify-content-center flex-wrap">
            <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("Index", new { page = currentPage - 1, pageSize, search = searchQuery })">Anterior</a>
            </li>
            @if (currentPage > maxPagesToShow + 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { page = 1, pageSize, search = searchQuery })">1</a>
                </li>
                <li class="page-item disabled">
                    <span class="page-link">...</span>
                </li>
            }
            @for (var i = Math.Max(1, currentPage - maxPagesToShow); i <= Math.Min(totalPages, currentPage + maxPagesToShow); i++)
            {
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Index", new { page = i, pageSize, search = searchQuery })">@i</a>
                </li>
            }
            @if (currentPage < totalPages - maxPagesToShow)
            {
                <li class="page-item disabled">
                    <span class="page-link">...</span>
                </li>
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { page = totalPages, pageSize, search = searchQuery })">@totalPages</a>
                </li>
            }
            <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("Index", new { page = currentPage + 1, pageSize, search = searchQuery })">Próximo</a>
            </li>
        </ul>
    </nav>
}

<audio id="hover-audio" src="assets/sounds/hover.wav" preload="auto"></audio>
<audio id="pcAudio" src="assets/sounds/pc-on.mp3" preload="auto"></audio>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const audio = document.getElementById("hover-audio");
        const cards = document.querySelectorAll(".hover-sound");
        const pcAudio = document.getElementById("pcAudio");
        audio.volume = 0.3;
        pcAudio.play();
        cards.forEach(card => {
            card.addEventListener("mouseenter", function () {
                audio.currentTime = 0; // Reset to start
                audio.play().catch(error => console.log("Playback failed:", error));
            });
        });
    });
</script>
