@using ApiModelsResponse.ViewModels
@using Microsoft.AspNetCore.Mvc.Localization
@model List<PokemonViewModel>
@inject IViewLocalizer localizer;
@{
    ViewData["Title"] = "Lista de Pokémon";
    var currentPage = ViewBag.CurrentPage ?? 1;
    var pageSize = ViewBag.PageSize ?? 20;
    var totalCount = ViewBag.TotalCount ?? 1000;
    var totalPages = ViewBag.TotalPages ?? 1;
    var maxPagesToShow = 3;
    var searchQuery = ViewBag.SearchQuery as string ?? "";
}

<form class="search-form" method="get" action="@Url.Action("Index")">
    <div class="search-container">
        <input type="text" class="search-input" name="search" placeholder='@localizer["searchPlaceholder"] ...' value="@searchQuery">
        <input type="hidden" name="page" value="1">
        <input type="hidden" name="pageSize" value="@pageSize">
        <button class="search-button" type="submit">@localizer["searchLabel"]</button>
    </div>
</form>

<div class="pokemon-grid">
    @foreach (var pokemon in Model)
    {
        <div class="pokemon-card-container">
            <a class="pokemon-card-link" href="@Url.Action("Details", "PokemonApi", new { pokemonName = pokemon.Name })">
                <div class="pokemon-card hover-sound">
                    <img src="@pokemon.Url" class="pokemon-image" alt="@pokemon.Name">
                    <h5 class="pokemon-name">@pokemon.Name.ToUpper()</h5>
                </div>
            </a>
        </div>
    }
</div>

@if (totalPages > 1)
{
    <nav class="pagination-container">
        <ul class="pagination">
            <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("Index", new { page = currentPage - 1, pageSize, search = searchQuery })">@localizer["prev"]</a>
            </li>
            @if (currentPage > maxPagesToShow + 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { page = 1, pageSize, search = searchQuery })">1</a>
                </li>
                <li class="page-item disabled">
                    <span class="page-link">...</span>
                </li>
            }
            @for (var i = Math.Max(1, currentPage - maxPagesToShow); i <= Math.Min(totalPages, currentPage + maxPagesToShow); i++)
            {
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Index", new { page = i, pageSize, search = searchQuery })">@i</a>
                </li>
            }
            @if (currentPage < totalPages - maxPagesToShow)
            {
                <li class="page-item disabled">
                    <span class="page-link">...</span>
                </li>
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { page = totalPages, pageSize, search = searchQuery })">@totalPages</a>
                </li>
            }
            <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("Index", new { page = currentPage + 1, pageSize, search = searchQuery })">@localizer["next"]</a>
            </li>
        </ul>
    </nav>
}

<audio id="hover-audio" src="assets/sounds/hover.wav" preload="auto"></audio>
<audio id="pcAudio" src="assets/sounds/pc-on.mp3" preload="auto"></audio>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const audio = document.getElementById("hover-audio");
        const cards = document.querySelectorAll(".hover-sound");
        const pcAudio = document.getElementById("pcAudio");
        audio.volume = 0.3;
        pcAudio.volume = 0.3;
        if(soundOn)
            pcAudio.play();
        cards.forEach(card => {
            card.addEventListener("mouseenter", function () {
                audio.currentTime = 0; // Reset to start
                if(soundOn)
                    audio.play().catch(error => console.log("Playback failed:", error));
            });
        });
    });
</script>