@using ApiModelsResponse.ViewModels
@model TreinadorViewModel

@{
    ViewData["Title"] = "Adicionar Treinador";
}

<h2>Adicionar Treinador</h2>

<form asp-action="Create" method="post" enctype="multipart/form-data">
    <div class="mb-3">
        <label asp-for="Name" class="form-label">Nome</label>
        <input asp-for="Name" class="form-control" required>
    </div>

    <div class="mb-3">
        <label asp-for="ImagePath" class="form-label">Imagem</label>
        <input type="file" class="form-control" id="imageUpload" accept="image/*">
        <input type="hidden" asp-for="ImagePath" id="imagePath">
    </div>

    <div class="mb-3">
        <label asp-for="Location" class="form-label">Localização</label>
        <input asp-for="Location" class="form-control" required>
    </div>

    <h4>Pokémons</h4>
    <div id="pokemonContainer">
        @for (int i = 0; i < 6; i++)
        {
            <div class="pokemon-slot border p-3 mb-2">
                <h5>Pokémon @(i + 1)</h5>
                <div class="mb-2">
                    <label class="form-label">Filtrar Pokémon</label>
                    <input type="text" class="form-control pokemon-filter" data-index="@i" placeholder="Digite para buscar...">
                </div>
                <div class="mb-2">
                    <label class="form-label">Selecionar Pokémon</label>
                    <select name="Pokemons[@i].Name" class="form-control pokemon-select" data-index="@i">
                        <option value="">Selecione um Pokémon</option>
                        @foreach (var pokemon in Model.Pokemons)
                        {
                            <option value="@pokemon.Name"
                                    type1="@pokemon.PokemonType1?.Name"
                                    type2="@pokemon.PokemonType2?.Name"
                                    ability1="@pokemon.Ability1?.Name"
                                    ability2="@pokemon.Ability2?.Name"
                                    ability3="@pokemon.Ability3?.Name">@pokemon.Name</option>
                        }
                    </select>
                </div>
                <div class="mb-2">
                    <label class="form-label">Tipo Primário</label>
                    <input type="text" name="Pokemons[@i].Type.Name" class="form-control" readonly>
                </div>
                <div class="mb-2">
                    <label class="form-label">Tipo Secundário</label>
                    <input type="text" name="Pokemons[@i].SecondType.Name" class="form-control" readonly>
                </div>
                <div class="mb-2">
                    <label class="form-label">Habilidade</label>
                    <select name="Pokemons[@i].Ability.Name" class="form-control ability-select">
                        <option value="">Selecione uma habilidade</option>
                    </select>
                </div>
                <div class="mb-2">
                    <label class="form-label">Level</label>
                    <input type="number" name="Pokemons[@i].Level" class="form-control" min="1" max="100">
                </div>
                <div class="mb-2">
                    <label class="form-label">Movimentos</label>
                    <select disabled name="Pokemons[@i].Move1" class="form-control" placeholder="Movimento 1">
                        <option value="">Selecione um Movimento</option>
                    </select>
                    <select disabled name="Pokemons[@i].Move2" class="form-control" placeholder="Movimento 2">
                        <option value="">Selecione um Movimento</option>
                    </select>
                    <select disabled name="Pokemons[@i].Move3" class="form-control" placeholder="Movimento 3">
                        <option value="">Selecione um Movimento</option>
                    </select>
                    <select disabled name="Pokemons[@i].Move4" class="form-control" placeholder="Movimento 4">
                        <option value="">Selecione um Movimento</option>
                    </select>
                </div>
            </div>
        }
    </div>

    <button type="submit" class="btn btn-primary">Salvar</button>
    <a asp-action="Index" class="btn btn-secondary">Cancelar</a>
</form>

<script>
    document.getElementById('imageUpload').addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                document.getElementById('imagePath').value = e.target.result;
            };
            reader.readAsDataURL(file);
        }
    });

    document.querySelectorAll('.pokemon-filter').forEach(input => {
        input.addEventListener('input', function() {
            const index = this.getAttribute('data-index');
            const filterValue = this.value.toLowerCase();
            const select = document.querySelector(`.pokemon-select[data-index='${index}']`);

            Array.from(select.options).forEach(option => {
                if (option.value.toLowerCase().includes(filterValue) || option.value === "") {
                    option.hidden = false;
                } else {
                    option.hidden = true;
                }
            });
        });
    });
        async function getPokemonMoves(pokemonName) {
        try {
            const response = await fetch(`https://localhost:7199/api/pokemonrestapi/moves/${pokemonName}`, {
                method: 'GET',
                mode: 'cors',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                },
            });

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const text = await response.text(); // Lê o conteúdo como texto
            const data = JSON.parse(text);

            return data;
        } catch (error) {
            console.error("Error fetching Pokémon moves:", error);
            throw error;
        }
    }
        document.querySelectorAll('.pokemon-select').forEach(async (select) => {
        select.addEventListener('change', async function(event) {
            const index = this.getAttribute('data-index');
            const selectedOption = this.selectedOptions[0]; // Get the selected option

            var pokemonName = event.target.value;

            try {
                var moves = await getPokemonMoves(pokemonName);
                    var selectPokemonMoves = [
                      document.getElementsByName("Pokemons[" + index + "].Move1")[0],
                      document.getElementsByName("Pokemons[" + index + "].Move2")[0],
                      document.getElementsByName("Pokemons[" + index + "].Move3")[0],
                      document.getElementsByName("Pokemons[" + index + "].Move4")[0]
                    ];

                    // Adiciona os movimentos como opções para cada select
                    selectPokemonMoves.forEach(select => {
                        select.innerHTML = "";
                        select.disabled = false;

                        var option = document.createElement("option");
                        option.value = "";  // valor do movimento
                        option.textContent = "Selecione um movimento";  // texto exibido
                        select.appendChild(option);  // adiciona a opção
                      moves.forEach(move => {
                        var option = document.createElement("option");
                        option.value = move.name;  // valor do movimento
                        option.textContent = move.name;  // texto exibido
                        select.appendChild(option);  // adiciona a opção no select
                      });
                    });

            } catch (error) {
                console.error("Error fetching Pokémon moves:", error);
            }

            // Get attributes from the selected option
            const type1 = selectedOption.getAttribute('type1') || "";
            const type2 = selectedOption.getAttribute('type2') || "";
            const ability1 = selectedOption.getAttribute('ability1') || "";
            const ability2 = selectedOption.getAttribute('ability2') || "";
            const ability3 = selectedOption.getAttribute('ability3') || "";

            // Fill in types if elements exist
            const typeInput = document.querySelector(`[name='Pokemons[${index}].Type.Name']`);
            if (typeInput) {
                typeInput.value = type1;
            }

            const secondTypeInput = document.querySelector(`[name='Pokemons[${index}].SecondType.Name']`);
            if (secondTypeInput) {
                secondTypeInput.value = type2;
            }

                /// Update abilities dropdown if element exists
            const abilitySelect = document.querySelector(`[name='Pokemons[${index}].Ability.Name']`);
            if (abilitySelect) {
                // Limpar as opções existentes
                abilitySelect.innerHTML = "<option value=''>Selecione uma habilidade</option>";

                // Adicionando as habilidades se existirem
                if (ability1) {
                    const option1 = document.createElement("option");
                    option1.value = ability1;
                    option1.textContent = ability1;
                    abilitySelect.appendChild(option1);
                }
                if (ability2) {
                    const option2 = document.createElement("option");
                    option2.value = ability2;
                    option2.textContent = ability2;
                    abilitySelect.appendChild(option2);
                }
                if (ability3) {
                    const option3 = document.createElement("option");
                    option3.value = ability3;
                    option3.textContent = ability3;
                    abilitySelect.appendChild(option3);
                }
            }

        });
    });

</script>