@using ApiModelsResponse.ViewModels
@using Microsoft.AspNetCore.Mvc.Localization
@model TreinadorViewModel
@inject IViewLocalizer localizer

<link rel="stylesheet" href="~/css/Trainers/index.css" />
@{
    ViewData["Title"] = "Adicionar Treinador";
}

<form class="trainer-form" asp-action="Edit" method="post" enctype="multipart/form-data">
    <div class="form-group">
        <label asp-for="Name" class="form-label">@localizer["name"]</label>
        <input asp-for="Name" class="form-input" value="@Model.Name" required>
    </div>

    <div class="form-group">
        <label asp-for="ImagePath" class="form-label">@localizer["image"]</label>
        <input type="file" class="form-input file-input" id="imageUpload" name="imageFile" value="@Model.ImagePath" accept="image/*">
        <input type="hidden" asp-for="ImagePath" value="@Model.ImagePath" id="imagePath">
    </div>

    <div class="form-group">
        <label asp-for="Location" class="form-label">@localizer["local"]</label>
        <input asp-for="Location" class="form-input" value="@Model.Location" required>
    </div>

    <h4 class="section-title">Pokémons</h4>
    <div id="pokemonContainer" class="pokemon-container">
        @for (int i = 1; i <= 6; i++)
        {
            <div class="pokemon-slot">
                <h5 class="pokemon-title">Pokémon @(i)</h5>
                <div class="form-group">
                    <label class="form-label">@localizer["filterPokemon"]</label>
                    <input type="text" class="form-input pokemon-filter" data-index="@i" placeholder="@localizer["typeToSearch"]">
                </div>
                <div class="form-group">
                    <label class="form-label">@localizer["selectPokemon"]</label>
                    <select name="Pokemon@(i)Name" class="form-select pokemon-select" data-index="@i">
                        <option value="">@localizer["selectAnPokemon"]</option>
                        @foreach (var pokemon in Model.Pokemons)
                        {
                            var pokemonName = Model.GetType().GetProperty($"Pokemon{i}Name")?.GetValue(Model)?.ToString();
                            if (pokemonName == pokemon.Name)
                            {
                                <option selected value="@pokemon.Name"
                                        type1="@pokemon.PokemonType1?.Name"
                                        type2="@pokemon.PokemonType2?.Name"
                                        ability1="@pokemon.Ability1?.Name"
                                        ability2="@pokemon.Ability2?.Name"
                                        ability3="@pokemon.Ability3?.Name">@pokemon.Name</option>
                            }
                            else
                            {
                                <option value="@pokemon.Name"
                                        type1="@pokemon.PokemonType1?.Name"
                                        type2="@pokemon.PokemonType2?.Name"
                                        ability1="@pokemon.Ability1?.Name"
                                        ability2="@pokemon.Ability2?.Name"
                                        ability3="@pokemon.Ability3?.Name">@pokemon.Name</option>
                            }
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">@localizer["type1"]</label>
                    <input type="text" name="Pokemon@(i)PokemonTypeName1" value="@Model.GetType().GetProperty($"Pokemon{i}PokemonTypeName1")?.GetValue(Model)" class="form-input" readonly>
                </div>
                <div class="form-group">
                    <label class="form-label">@localizer["type2"]</label>
                    <input type="text" name="Pokemon@(i)PokemonTypeName2" value="@Model.GetType().GetProperty($"Pokemon{i}PokemonTypeName2")?.GetValue(Model)" class="form-input" readonly>
                </div>
                <div class="form-group">
                    <label class="form-label">@localizer["ability"]</label>
                    <select name="Pokemon@(i)Ability" value="@Model.GetType().GetProperty($"Pokemon{i}Ability")?.GetValue(Model)" class="form-select ability-select">
                        <option value="">@localizer["selectAnAbility"]</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">@localizer["level"]</label>
                    <input type="number" name="Pokemon@(i)Level" value="@Model.GetType().GetProperty($"Pokemon{i}Level")?.GetValue(Model)" class="form-input" min="0" max="100">
                </div>
                <div class="form-group moves-container">
                    <label class="form-label">@localizer["moves"]</label>
                    <select disabled name="Pokemon@(i)Move1" value="@Model.GetType().GetProperty($"Pokemon{i}Move1")?.GetValue(Model)" class="form-select move-select" placeholder="Movimento 1">
                        <option value="">@localizer["selectMovement"]</option>
                    </select>
                    <select disabled name="Pokemon@(i)Move2" value="@Model.GetType().GetProperty($"Pokemon{i}Move2")?.GetValue(Model)" class="form-select move-select" placeholder="Movimento 2">
                        <option value="">@localizer["selectMovement"]</option>
                    </select>
                    <select disabled name="Pokemon@(i)Move3" value="@Model.GetType().GetProperty($"Pokemon{i}Move3")?.GetValue(Model)" class="form-select move-select" placeholder="Movimento 3">
                        <option value="">@localizer["selectMovement"]</option>
                    </select>
                    <select disabled name="Pokemon@(i)Move4" value="@Model.GetType().GetProperty($"Pokemon{i}Move4")?.GetValue(Model)" class="form-select move-select" placeholder="Movimento 4">
                        <option value="">@localizer["selectMovement"]</option>
                    </select>
                </div>
            </div>
        }
    </div>

    <div class="form-actions">
        <button type="submit" class="btn btn-primary">@localizer["edit"]</button>
        <a asp-action="Index" class="btn btn-secondary">@localizer["cancel"]</a>
    </div>
</form>

<script>
    document.getElementById('imageUpload').addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                document.getElementById('imagePath').value = e.target.result;
            };
            reader.readAsDataURL(file);
        }
    });

    document.querySelectorAll('.pokemon-filter').forEach(input => {
        input.addEventListener('input', function() {
            const index = this.getAttribute('data-index');
            const filterValue = this.value.toLowerCase();
            const select = document.querySelector(`.pokemon-select[data-index='${index}']`);

            Array.from(select.options).forEach(option => {
                if (option.value.toLowerCase().includes(filterValue) || option.value === "") {
                    option.hidden = false;
                } else {
                    option.hidden = true;
                }
            });
        });
    });

    async function getPokemonMoves(pokemonName) {
        try {
            const response = await fetch(`https://localhost:7199/api/pokemonrestapi/moves/${pokemonName}`, {
                method: 'GET',
                mode: 'cors',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                },
            });

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const text = await response.text();
            const data = JSON.parse(text);

            return data;
        } catch (error) {
            console.error("Error fetching Pokémon moves:", error);
            throw error;
        }
    }

    document.querySelectorAll('.pokemon-select').forEach(async (select) => {
        select.addEventListener('change', async function(event) {
            const index = this.getAttribute('data-index');
            const selectedOption = this.selectedOptions[0];

            var pokemonName = event.target.value;

            try {
                var moves = await getPokemonMoves(pokemonName);
                var selectPokemonMoves = [
                    document.getElementsByName("Pokemon" + index + "Move1")[0],
                    document.getElementsByName("Pokemon" + index + "Move2")[0],
                    document.getElementsByName("Pokemon" + index + "Move3")[0],
                    document.getElementsByName("Pokemon" + index + "Move4")[0]
                ];

                selectPokemonMoves.forEach(select => {
                    select.innerHTML = "";
                    select.disabled = false;

                    var option = document.createElement("option");
                    option.value = "";
                    option.textContent = "Selecione um movimento";
                    select.appendChild(option);
                    moves.forEach(move => {
                        var option = document.createElement("option");
                        option.value = move.name;
                        option.textContent = move.name;
                        select.appendChild(option);
                    });
                });

            } catch (error) {
                console.error("Error fetching Pokémon moves:", error);
            }

            const type1 = selectedOption.getAttribute('type1') || "";
            const type2 = selectedOption.getAttribute('type2') || "";
            const ability1 = selectedOption.getAttribute('ability1') || "";
            const ability2 = selectedOption.getAttribute('ability2') || "";
            const ability3 = selectedOption.getAttribute('ability3') || "";

            const typeInput = document.querySelector(`[name='Pokemon${index}PokemonTypeName1']`);
            if (typeInput) {
                typeInput.value = type1;
            }

            const secondTypeInput = document.querySelector(`[name='Pokemon${index}PokemonTypeName2']`);
            if (secondTypeInput) {
                secondTypeInput.value = type2;
            }

            const abilitySelect = document.querySelector(`[name='Pokemon${index}Ability']`);
            if (abilitySelect) {
                abilitySelect.innerHTML = "<option value=''>Selecione uma habilidade</option>";

                if (ability1) {
                    const option1 = document.createElement("option");
                    option1.value = ability1;
                    option1.textContent = ability1;
                    abilitySelect.appendChild(option1);
                }
                if (ability2) {
                    const option2 = document.createElement("option");
                    option2.value = ability2;
                    option2.textContent = ability2;
                    abilitySelect.appendChild(option2);
                }
                if (ability3) {
                    const option3 = document.createElement("option");
                    option3.value = ability3;
                    option3.textContent = ability3;
                    abilitySelect.appendChild(option3);
                }
            }
        });
    });

    document.addEventListener("DOMContentLoaded", function() {
        document.querySelectorAll('.pokemon-select').forEach((select, contador) => {
            if (select.value) {
                select.dispatchEvent(new Event('change'));
            }
        });
    });
</script>